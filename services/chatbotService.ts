import AsyncStorage from '@react-native-async-storage/async-storage';
import { API_URL, API_BASE_URL, USER_API, PRODUCT_API, CART_API, FAVORITE_API, COMMENT_API, COUPON_API, ORDER_API, CHATBOT_API, IMAGE_SEARCH_API } from '../config/api';


export interface ChatMessage {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  typing?: boolean;
  productIds?: string[];
}

export interface ChatResponse {
  reply: string;
  error?: string;
}

export interface ProductMention {
  id: string;
  name: string;
  startIndex: number;
  endIndex: number;
}

export interface ChatHistory {
  messages: ChatMessage[];
  lastUpdated: string;
  userId: string;
}

const CHAT_HISTORY_PREFIX = 'chatbot_history_user_';
const OLD_CHAT_HISTORY_KEY = 'chatbot_history';

class ChatbotService {
  // Get current user ID from AsyncStorage
  async getCurrentUserId(): Promise<string> {
    try {
      const userStr = await AsyncStorage.getItem('user');
      if (userStr) {
        const user = JSON.parse(userStr);
        return user._id || 'guest';
      }
      return 'guest';
    } catch (error) {
      console.error('‚ùå Error getting user ID:', error);
      return 'guest';
    }
  }

  // Generate storage key for current user
  async getUserChatKey(userId?: string): Promise<string> {
    const currentUserId = userId || await this.getCurrentUserId();
    return `${CHAT_HISTORY_PREFIX}${currentUserId}`;
  }

  // Send message to chatbot and get AI response
  async sendMessage(message: string): Promise<string> {
    try {
      console.log('ü§ñ Sending message to chatbot:', message);
      
      const response = await fetch(`${CHATBOT_API}/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data: ChatResponse = await response.json();
      
      if (data.error) {
        throw new Error(data.error);
      }

      console.log('‚úÖ Received bot response:', data.reply);
      return data.reply;
    } catch (error) {
      console.error('‚ùå Chatbot service error:', error);
      
      // Fallback responses for common scenarios
      return this.getFallbackResponse(message);
    }
  }

  // Save chat history to AsyncStorage for specific user
  async saveChatHistory(messages: ChatMessage[], userId?: string): Promise<void> {
    try {
      const currentUserId = userId || await this.getCurrentUserId();
      const storageKey = await this.getUserChatKey(currentUserId);
      
      // Filter out typing messages before saving
      const permanentMessages = messages.filter(msg => !msg.typing);
      
      const chatHistory: ChatHistory = {
        messages: permanentMessages,
        lastUpdated: new Date().toISOString(),
        userId: currentUserId,
      };

      await AsyncStorage.setItem(storageKey, JSON.stringify(chatHistory));
      console.log(`üíæ Chat history saved for user: ${currentUserId}`);
    } catch (error) {
      console.error('‚ùå Error saving chat history:', error);
    }
  }

  // Load chat history from AsyncStorage for specific user
  async loadChatHistory(userId?: string): Promise<ChatMessage[]> {
    try {
      const currentUserId = userId || await this.getCurrentUserId();
      const storageKey = await this.getUserChatKey(currentUserId);
      
      // Try to load user-specific chat history
      let stored = await AsyncStorage.getItem(storageKey);
      
      // If no user-specific history found, try to migrate from old format
      if (!stored && currentUserId !== 'guest') {
        stored = await this.migrateOldChatHistory(currentUserId);
      }
      
      if (!stored) {
        console.log(`üìù No chat history found for user: ${currentUserId}, starting fresh`);
        return [this.getWelcomeMessage(currentUserId)];
      }

      const chatHistory: ChatHistory = JSON.parse(stored);
      
      // Convert timestamp strings back to Date objects
      const messages = chatHistory.messages.map(msg => ({
        ...msg,
        timestamp: new Date(msg.timestamp),
      }));

      console.log(`üìö Loaded ${messages.length} messages for user: ${currentUserId}`);
      return messages;
    } catch (error) {
      console.error('‚ùå Error loading chat history:', error);
      const userId = await this.getCurrentUserId();
      return [this.getWelcomeMessage(userId)];
    }
  }

  // Migrate old chat history to user-specific format
  async migrateOldChatHistory(userId: string): Promise<string | null> {
    try {
      const oldHistory = await AsyncStorage.getItem(OLD_CHAT_HISTORY_KEY);
      if (oldHistory) {
        console.log(`üîÑ Migrating old chat history to user: ${userId}`);
        
        // Save old history to user-specific key
        const storageKey = await this.getUserChatKey(userId);
        const parsedHistory = JSON.parse(oldHistory);
        
        // Update format if needed
        const migratedHistory: ChatHistory = {
          messages: parsedHistory.messages || [],
          lastUpdated: parsedHistory.lastUpdated || new Date().toISOString(),
          userId: userId,
        };
        
        await AsyncStorage.setItem(storageKey, JSON.stringify(migratedHistory));
        
        // Remove old format
        await AsyncStorage.removeItem(OLD_CHAT_HISTORY_KEY);
        
        console.log('‚úÖ Migration completed');
        return JSON.stringify(migratedHistory);
      }
    } catch (error) {
      console.error('‚ùå Error during migration:', error);
    }
    return null;
  }

  // Clear chat history for specific user
  async clearChatHistory(userId?: string): Promise<void> {
    try {
      const currentUserId = userId || await this.getCurrentUserId();
      const storageKey = await this.getUserChatKey(currentUserId);
      
      await AsyncStorage.removeItem(storageKey);
      console.log(`üóëÔ∏è Chat history cleared for user: ${currentUserId}`);
    } catch (error) {
      console.error('‚ùå Error clearing chat history:', error);
    }
  }

  // Clear all chat histories (for debugging/admin)
  async clearAllChatHistories(): Promise<void> {
    try {
      const keys = await AsyncStorage.getAllKeys();
      const chatKeys = keys.filter(key => key.startsWith(CHAT_HISTORY_PREFIX));
      
      await AsyncStorage.multiRemove([...chatKeys, OLD_CHAT_HISTORY_KEY]);
      console.log(`üóëÔ∏è Cleared ${chatKeys.length} chat histories`);
    } catch (error) {
      console.error('‚ùå Error clearing all chat histories:', error);
    }
  }

  // Get user info for personalized messages
  async getUserInfo(): Promise<{id: string, name: string, isGuest: boolean}> {
    try {
      const userStr = await AsyncStorage.getItem('user');
      if (userStr) {
        const user = JSON.parse(userStr);
        return {
          id: user._id || 'guest',
          name: user.fullname || 'Ng∆∞·ªùi d√πng',
          isGuest: false,
        };
      }
      return {
        id: 'guest',
        name: 'Kh√°ch',
        isGuest: true,
      };
    } catch (error) {
      return {
        id: 'guest',
        name: 'Kh√°ch',
        isGuest: true,
      };
    }
  }

  // Auto-save messages (call this after each message exchange)
  async autoSaveMessages(messages: ChatMessage[]): Promise<void> {
    // Debounce auto-save to avoid too frequent writes
    if (this.autoSaveTimeout) {
      clearTimeout(this.autoSaveTimeout);
    }

    this.autoSaveTimeout = setTimeout(() => {
      this.saveChatHistory(messages);
    }, 1000); // Save 1 second after last message
  }

  private autoSaveTimeout: number | null = null;

  // Parse product IDs from message text
  parseProductIds(text: string): string[] {
    const idPattern = /\[ID:\s*([a-fA-F0-9]{24})\]/g;
    const matches = [];
    let match;
    
    while ((match = idPattern.exec(text)) !== null) {
      matches.push(match[1]);
    }
    
    return matches;
  }

  // Extract product mentions with positions for highlighting
  extractProductMentions(text: string): ProductMention[] {
    const mentions: ProductMention[] = [];
    const pattern = /(.*?)\s*\[ID:\s*([a-fA-F0-9]{24})\]/g;
    let match;
    
    while ((match = pattern.exec(text)) !== null) {
      const productName = match[1].trim();
      const productId = match[2];
      const startIndex = match.index;
      const endIndex = match.index + match[0].length;
      
      mentions.push({
        id: productId,
        name: productName,
        startIndex,
        endIndex
      });
    }
    
    return mentions;
  }

  // Format message text to remove ID tags and make it cleaner
  formatMessageText(text: string): string {
    // Remove [ID: xxx] tags for cleaner display
    return text.replace(/\s*\[ID:\s*[a-fA-F0-9]{24}\]/g, '');
  }

  // Generate unique message ID
  generateMessageId(): string {
    return Date.now().toString() + Math.random().toString(36).substr(2, 9);
  }

  // Create user message object
  createUserMessage(text: string): ChatMessage {
    return {
      id: this.generateMessageId(),
      text,
      sender: 'user',
      timestamp: new Date(),
    };
  }

  // Create bot message object with product parsing
  createBotMessage(text: string, typing = false): ChatMessage {
    const productIds = this.parseProductIds(text);
    const cleanText = this.formatMessageText(text);
    
    return {
      id: this.generateMessageId(),
      text: cleanText,
      sender: 'bot',
      timestamp: new Date(),
      typing,
      productIds: productIds.length > 0 ? productIds : undefined,
    };
  }

  // Create typing indicator
  createTypingMessage(): ChatMessage {
    return this.createBotMessage('ƒêang so·∫°n tin...', true);
  }

  // Fallback responses when API fails
  private getFallbackResponse(message: string): string {
    const lowerMessage = message.toLowerCase();
    
    // Greetings
    if (lowerMessage.includes('ch√†o') || lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
      return 'Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n t·∫°i H·ªá th·ªëng Th·ªùi trang H&A. T√¥i l√† tr·ª£ l√Ω ·∫£o ‚Äì T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?';
    }
    
    // Product specific queries
    if (lowerMessage.includes('√°o thun') || lowerMessage.includes('t-shirt')) {
      return 'H&A c√≥ nhi·ªÅu m·∫´u √°o thun ƒë·∫πp cho nam v√† n·ªØ! Ch√∫ng t√¥i c√≥ √°o thun basic, √°o thun form r·ªông, √°o thun in h·ªça ti·∫øt. B·∫°n mu·ªën xem √°o thun nam hay n·ªØ? C√≥ phong c√°ch n√†o ƒë·∫∑c bi·ªát kh√¥ng?';
    }
    
    if (lowerMessage.includes('qu·∫ßn') || lowerMessage.includes('jeans')) {
      return 'H&A c√≥ ƒëa d·∫°ng c√°c lo·∫°i qu·∫ßn: jeans, kaki, short, jogger. Qu·∫ßn jeans c·ªßa ch√∫ng t√¥i c√≥ nhi·ªÅu ki·ªÉu d√°ng: skinny, slim fit, regular, baggy. B·∫°n mu·ªën t√¨m qu·∫ßn g√¨ v√† size bao nhi√™u?';
    }
    
    if (lowerMessage.includes('v√°y') || lowerMessage.includes('ƒë·∫ßm')) {
      return 'H&A c√≥ nhi·ªÅu m·∫´u v√°y v√† ƒë·∫ßm xinh x·∫Øn! V√°y d·ª± ti·ªác, v√°y c√¥ng s·ªü, v√°y d·∫°o ph·ªë, ƒë·∫ßm maxi, ƒë·∫ßm su√¥ng... B·∫°n ƒëang t√¨m ki·ªÉu v√°y n√†o v√† cho d·ªãp g√¨?';
    }
    
    // Style advice
    if (lowerMessage.includes('ph·ªëi ƒë·ªì') || lowerMessage.includes('outfit') || lowerMessage.includes('mix')) {
      return 'ƒê·ªÉ ph·ªëi ƒë·ªì ƒë·∫πp, b·∫°n n√™n ch·ªçn trang ph·ª•c ph√π h·ª£p v·ªõi d√°ng ng∆∞·ªùi v√† m√†u da. V·ªõi √°o thun basic, b·∫°n c√≥ th·ªÉ k·∫øt h·ª£p v·ªõi qu·∫ßn jeans v√† gi√†y sneaker cho outfit nƒÉng ƒë·ªông. B·∫°n mu·ªën ƒë∆∞·ª£c t∆∞ v·∫•n ph·ªëi ƒë·ªì cho d·ªãp n√†o?';
    }
    
    if (lowerMessage.includes('xu h∆∞·ªõng') || lowerMessage.includes('trend')) {
      return 'Xu h∆∞·ªõng th·ªùi trang hi·ªán nay ƒëang thi√™n v·ªÅ phong c√°ch Y2K, Minimalism v√† Oversized. √Åo ph√¥ng form r·ªông, qu·∫ßn ·ªëng su√¥ng, v√† m√†u s·∫Øc pastel ƒëang r·∫•t ƒë∆∞·ª£c ∆∞a chu·ªông. B·∫°n quan t√¢m ƒë·∫øn phong c√°ch n√†o?';
    }
    
    // Information queries
    if (lowerMessage.includes('gi√°') || lowerMessage.includes('bao nhi√™u')) {
      return 'S·∫£n ph·∫©m t·∫°i H&A c√≥ gi√° t·ª´ 200.000 - 1.500.000 VNƒê. √Åo thun t·ª´ 200.000 - 400.000 VNƒê, qu·∫ßn jeans t·ª´ 400.000 - 700.000 VNƒê, v√°y ƒë·∫ßm t·ª´ 350.000 - 900.000 VNƒê. B·∫°n ƒëang quan t√¢m ƒë·∫øn s·∫£n ph·∫©m n√†o?';
    }
    
    if (lowerMessage.includes('size') || lowerMessage.includes('k√≠ch th∆∞·ªõc')) {
      return 'H&A c√≥ ƒë·∫ßy ƒë·ªß size S, M, L cho c·∫£ nam v√† n·ªØ. Size S ph√π h·ª£p v·ªõi ng∆∞·ªùi d∆∞·ªõi 55kg, M cho ng∆∞·ªùi 55-65kg, L cho ng∆∞·ªùi 65-75kg. B·∫°n c√≥ th·ªÉ tham kh·∫£o b·∫£ng size chi ti·∫øt khi ch·ªçn s·∫£n ph·∫©m. B·∫°n th∆∞·ªùng m·∫∑c size n√†o?';
    }
    
    if (lowerMessage.includes('giao h√†ng') || lowerMessage.includes('ship')) {
      return 'H&A h·ªó tr·ª£ giao h√†ng to√†n qu·ªëc trong 1-3 ng√†y l√†m vi·ªác. Ph√≠ ship t·ª´ 20.000 VNƒê. ƒê∆°n h√†ng tr√™n 500.000 VNƒê ƒë∆∞·ª£c freeship! B·∫°n mu·ªën bi·∫øt th√™m th√¥ng tin v·ªÅ ch√≠nh s√°ch giao h√†ng?';
    }
    
    if (lowerMessage.includes('c·∫£m ∆°n') || lowerMessage.includes('thanks')) {
      return 'C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng H&A! N·∫øu c·∫ßn t∆∞ v·∫•n th√™m v·ªÅ s·∫£n ph·∫©m th·ªùi trang n√†o, ƒë·ª´ng ng·∫°i h·ªèi t√¥i nh√©! üòä';
    }
    
    // Non-fashion related queries
    if (lowerMessage.includes('th·ªùi ti·∫øt') || lowerMessage.includes('d·ª± b√°o')) {
      return 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ cung c·∫•p th√¥ng tin v·ªÅ th·ªùi ti·∫øt. T√¥i ch·ªâ c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ s·∫£n ph·∫©m th·ªùi trang t·∫°i H&A. B·∫°n c·∫ßn t∆∞ v·∫•n trang ph·ª•c ph√π h·ª£p v·ªõi th·ªùi ti·∫øt hi·ªán t·∫°i kh√¥ng?';
    }
    
    if (lowerMessage.includes('ch√≠nh tr·ªã') || lowerMessage.includes('b·∫ßu c·ª≠') || lowerMessage.includes('chi·∫øn tranh')) {
      return 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ th·∫£o lu·∫≠n v·ªÅ c√°c ch·ªß ƒë·ªÅ ch√≠nh tr·ªã. T√¥i ch·ªâ c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ s·∫£n ph·∫©m th·ªùi trang t·∫°i H&A. B·∫°n c·∫ßn t√¨m s·∫£n ph·∫©m th·ªùi trang n√†o kh√¥ng?';
    }
    
    if (lowerMessage.includes('ƒë·∫ßu t∆∞') || lowerMessage.includes('ch·ª©ng kho√°n') || lowerMessage.includes('bitcoin')) {
      return 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ t∆∞ v·∫•n v·ªÅ ƒë·∫ßu t∆∞ hay t√†i ch√≠nh. T√¥i ch·ªâ c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ s·∫£n ph·∫©m th·ªùi trang t·∫°i H&A. B·∫°n c·∫ßn t√¨m s·∫£n ph·∫©m th·ªùi trang n√†o kh√¥ng?';
    }
    
    // Default fallback
    return 'T√¥i l√† tr·ª£ l√Ω t∆∞ v·∫•n th·ªùi trang c·ªßa H&A. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m c·ª• th·ªÉ, t∆∞ v·∫•n ph·ªëi ƒë·ªì v√† g·ª£i √Ω outfit ph√π h·ª£p v·ªõi d√°ng ng∆∞·ªùi, m√†u da v√† d·ªãp s·ª≠ d·ª•ng. B·∫°n c·∫ßn t∆∞ v·∫•n v·ªÅ s·∫£n ph·∫©m th·ªùi trang n√†o?';
  }

  // Get personalized welcome message
  getWelcomeMessage(userId?: string): ChatMessage {
    return this.createBotMessage(
      'Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n t·∫°i H·ªá th·ªëng Th·ªùi trang H&A. T√¥i l√† tr·ª£ l√Ω ·∫£o ‚Äì T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?'
    );
  }

  // Get suggested questions
  getSuggestedQuestions(): string[] {
    return [
      'C√≥ √°o thun nam n√†o ƒë·∫πp kh√¥ng?',
      'G·ª£i √Ω outfit ƒëi l√†m',
      'V√°y d·ª± ti·ªác gi√° t·ªët',
      'Qu·∫ßn jeans n·ªØ trending',
      'Ph·ªëi ƒë·ªì m√πa h√® nh∆∞ th·∫ø n√†o?',
      'Xu h∆∞·ªõng th·ªùi trang m√πa n√†y',
      'T∆∞ v·∫•n ƒë·ªì cho ng∆∞·ªùi m·∫≠p',
      '√Åo kho√°c ph√π h·ª£p th·ªùi ti·∫øt l·∫°nh'
    ];
  }
}

export default new ChatbotService(); 