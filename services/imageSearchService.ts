import * as ImagePicker from 'expo-image-picker';
import { API_URL, API_BASE_URL, USER_API, PRODUCT_API, CART_API, FAVORITE_API, COMMENT_API, COUPON_API, ORDER_API, CHATBOT_API, IMAGE_SEARCH_API, EXTERNAL_IMAGE_SEARCH_API } from '../config/api';

import { Alert } from 'react-native';

export interface ImageSearchResult {
  _id: string;
  name_product: string;
  price_product: number;
  image: string;
  similarity?: number;
}

class ImageSearchService {
  // Request camera permissions
  async requestCameraPermission(): Promise<boolean> {
    try {
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert(
          'C·∫ßn quy·ªÅn truy c·∫≠p',
          '·ª®ng d·ª•ng c·∫ßn quy·ªÅn truy c·∫≠p camera ƒë·ªÉ t√¨m ki·∫øm b·∫±ng h√¨nh ·∫£nh.',
          [{ text: 'OK' }]
        );
        return false;
      }
      return true;
    } catch (error) {
      console.error('Error requesting camera permission:', error);
      return false;
    }
  }

  // Request media library permissions
  async requestMediaLibraryPermission(): Promise<boolean> {
    try {
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert(
          'C·∫ßn quy·ªÅn truy c·∫≠p',
          '·ª®ng d·ª•ng c·∫ßn quy·ªÅn truy c·∫≠p th∆∞ vi·ªán ·∫£nh ƒë·ªÉ t√¨m ki·∫øm b·∫±ng h√¨nh ·∫£nh.',
          [{ text: 'OK' }]
        );
        return false;
      }
      return true;
    } catch (error) {
      console.error('Error requesting media library permission:', error);
      return false;
    }
  }

  // Take photo with camera
  async takePhoto(): Promise<string | null> {
    try {
      const hasPermission = await this.requestCameraPermission();
      if (!hasPermission) return null;

      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      if (!result.canceled && result.assets[0]) {
        return result.assets[0].uri;
      }
      return null;
    } catch (error) {
      console.error('Error taking photo:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ch·ª•p ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.');
      return null;
    }
  }

  // Pick image from gallery
  async pickImage(): Promise<string | null> {
    try {
      const hasPermission = await this.requestMediaLibraryPermission();
      if (!hasPermission) return null;

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      if (!result.canceled && result.assets[0]) {
        return result.assets[0].uri;
      }
      return null;
    } catch (error) {
      console.error('Error picking image:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ch·ªçn ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.');
      return null;
    }
  }

  // Upload image and search for similar products
  async searchByImage(imageUri: string): Promise<ImageSearchResult[]> {
    try {
      // T·∫°o FormData ƒë·ªÉ upload ·∫£nh
      const formData = new FormData();
      formData.append('image', {
        uri: imageUri,
        type: 'image/jpeg',
        name: 'search_image.jpg',
      } as any);

      console.log('üñºÔ∏è Uploading image for search:', imageUri);

      // G·ªçi API search by image th·ª±c (gi·ªëng web client)
      const searchResponse = await fetch(EXTERNAL_IMAGE_SEARCH_API, {
        method: 'POST',
        body: formData,
      });

      if (!searchResponse.ok) {
        const errorText = await searchResponse.text();
        console.error('‚ùå Search API response not ok:', errorText);
        throw new Error('Image search failed');
      }

      const searchResults = await searchResponse.json();
      console.log('‚úÖ Received search results:', searchResults);

      // Parse k·∫øt qu·∫£ t·ª´ API (format: { matched_products: [...] })
      const matchedProducts = searchResults.matched_products || [];
      
      // Convert sang format mobile app v·ªõi similarity percentage
      const results: ImageSearchResult[] = matchedProducts.map((product: any) => ({
        _id: product._id,
        name_product: product.name_product,
        price_product: parseInt(product.price_product) || 0,
        image: product.image,
        similarity: Math.round((product.similarity_score || 0) * 100), // Convert 0-1 th√†nh percentage
      }));

      console.log('üì± Converted results for mobile:', results);
      return results;

    } catch (error) {
      console.error('‚ùå Error searching by image:', error);
      
      // Fallback: N·∫øu AI service kh√¥ng ho·∫°t ƒë·ªông, s·ª≠ d·ª•ng simulation
      console.log('üîÑ Falling back to simulation...');
      return this.simulateImageSearch();
    }
  }

  // Backup simulation method (fallback khi AI service down)
  private async simulateImageSearch(): Promise<ImageSearchResult[]> {
    try {
      console.log('üé≠ Running simulation search...');
      
      // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÉ simulate search
      const allProductsResponse = await fetch(PRODUCT_API);
      const allProducts = await allProductsResponse.json();

      // Simulate vi·ªác t√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª±
      const shuffled = [...allProducts].sort(() => 0.5 - Math.random());
      const searchResults = shuffled.slice(0, 6).map((product: any, index: number) => ({
        ...product,
        price_product: parseInt(product.price_product) || 0,
        similarity: 95 - (index * 5), // Simulate ƒë·ªô t∆∞∆°ng t·ª± gi·∫£m d·∫ßn
      }));

      return searchResults;
    } catch (error) {
      console.error('‚ùå Simulation also failed:', error);
      throw new Error('Kh√¥ng th·ªÉ t√¨m ki·∫øm b·∫±ng h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  }

  // Show image source selection
  async showImageSourceOptions(): Promise<string | null> {
    return new Promise((resolve) => {
      Alert.alert(
        'T√¨m ki·∫øm b·∫±ng h√¨nh ·∫£nh',
        'Ch·ªçn ngu·ªìn h√¨nh ·∫£nh:',
        [
          {
            text: 'Ch·ª•p ·∫£nh',
            onPress: async () => {
              const imageUri = await this.takePhoto();
              resolve(imageUri);
            },
          },
          {
            text: 'Ch·ªçn t·ª´ th∆∞ vi·ªán',
            onPress: async () => {
              const imageUri = await this.pickImage();
              resolve(imageUri);
            },
          },
          {
            text: 'H·ªßy',
            onPress: () => resolve(null),
            style: 'cancel',
          },
        ],
        { cancelable: true }
      );
    });
  }
}

export default new ImageSearchService(); 