import { Product } from './productService';

const API_BASE_URL = 'http://192.168.1.45:8000'; // Thay IP n√†y b·∫±ng IP m√°y t√≠nh c·ªßa b·∫°n

export interface FavoriteItem {
  _id: string;
  id_user: string;
  id_product: Product;
  createdAt?: string;
  updatedAt?: string;
}

export interface FavoriteResponse {
  success: boolean;
  message: string;
  data?: FavoriteItem[];
}

export interface FavoriteActionResponse {
  success: boolean;
  message: string;
  data?: any;
}

export interface CheckFavoriteResponse {
  success: boolean;
  isFavorite: boolean;
}

const favoriteService = {
  // L·∫•y danh s√°ch s·∫£n ph·∫©m y√™u th√≠ch c·ªßa user
  getFavorites: async (userId: string): Promise<FavoriteItem[]> => {
    try {
      console.log('üîç Getting favorites for user:', userId);
      
      const response = await fetch(`${API_BASE_URL}/api/Favorite/${userId}`);
      const result: FavoriteResponse = await response.json();
      
      if (result.success && result.data) {
        console.log('‚úÖ Favorites loaded:', result.data.length);
        return result.data;
      } else {
        console.log('‚ùå Failed to get favorites:', result.message);
        return [];
      }
    } catch (error) {
      console.error('‚ùå Error getting favorites:', error);
      return [];
    }
  },

  // Th√™m s·∫£n ph·∫©m v√†o y√™u th√≠ch
  addFavorite: async (userId: string, productId: string): Promise<FavoriteActionResponse> => {
    try {
      console.log('‚ù§Ô∏è Adding favorite:', { userId, productId });
      
      const response = await fetch(`${API_BASE_URL}/api/Favorite`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id_user: userId,
          id_product: productId,
        }),
      });
      
      const result: FavoriteActionResponse = await response.json();
      
      if (result.success) {
        console.log('‚úÖ Added to favorites:', result.message);
      } else {
        console.log('‚ùå Failed to add favorite:', result.message);
      }
      
      return result;
    } catch (error) {
      console.error('‚ùå Error adding favorite:', error);
      return {
        success: false,
        message: 'L·ªói k·∫øt n·ªëi khi th√™m v√†o y√™u th√≠ch'
      };
    }
  },

  // X√≥a s·∫£n ph·∫©m kh·ªèi y√™u th√≠ch
  removeFavorite: async (userId: string, productId: string): Promise<FavoriteActionResponse> => {
    try {
      console.log('üíî Removing favorite:', { userId, productId });
      
      const response = await fetch(`${API_BASE_URL}/api/Favorite`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id_user: userId,
          id_product: productId,
        }),
      });
      
      const result: FavoriteActionResponse = await response.json();
      
      if (result.success) {
        console.log('‚úÖ Removed from favorites:', result.message);
      } else {
        console.log('‚ùå Failed to remove favorite:', result.message);
      }
      
      return result;
    } catch (error) {
      console.error('‚ùå Error removing favorite:', error);
      return {
        success: false,
        message: 'L·ªói k·∫øt n·ªëi khi x√≥a kh·ªèi y√™u th√≠ch'
      };
    }
  },

  // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong y√™u th√≠ch kh√¥ng
  checkFavorite: async (userId: string, productId: string): Promise<boolean> => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/Favorite/check/${userId}/${productId}`);
      const result: CheckFavoriteResponse = await response.json();
      
      if (result.success) {
        return result.isFavorite;
      }
      
      return false;
    } catch (error) {
      console.error('‚ùå Error checking favorite:', error);
      return false;
    }
  },

  // Toggle favorite (th√™m/x√≥a)
  toggleFavorite: async (userId: string, productId: string): Promise<{ success: boolean, isFavorite: boolean, message: string }> => {
    try {
      // Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i
      const isFavorite = await favoriteService.checkFavorite(userId, productId);
      
      let result: FavoriteActionResponse;
      
      if (isFavorite) {
        // N·∫øu ƒë√£ y√™u th√≠ch th√¨ x√≥a
        result = await favoriteService.removeFavorite(userId, productId);
        return {
          success: result.success,
          isFavorite: false,
          message: result.message
        };
      } else {
        // N·∫øu ch∆∞a y√™u th√≠ch th√¨ th√™m
        result = await favoriteService.addFavorite(userId, productId);
        return {
          success: result.success,
          isFavorite: true,
          message: result.message
        };
      }
    } catch (error) {
      console.error('‚ùå Error toggling favorite:', error);
      return {
        success: false,
        isFavorite: false,
        message: 'L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i y√™u th√≠ch'
      };
    }
  }
};

// Export individual functions
export const getFavorites = favoriteService.getFavorites;
export const addFavorite = favoriteService.addFavorite;
export const removeFavorite = favoriteService.removeFavorite;
export const checkFavorite = favoriteService.checkFavorite;
export const toggleFavorite = favoriteService.toggleFavorite;

export default favoriteService; 